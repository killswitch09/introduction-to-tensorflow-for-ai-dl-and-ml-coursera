def train_mnist():
    # Please write your code only where you are indicated.
    # please do not remove # model fitting inline comments.
    print(tf.__version__)
    class myCallback(tf.keras.callbacks.Callback):
        def on_epoch_end(self, epoch, logs={}):
            if (logs.get("acc")>0.99):
                print("\nReached 99% accuracy so cancelling training!")
                self.model.stop_training = True
                
    print(tf.__version__)
    
    mnist = tf.keras.datasets.mnist 
    
    callbacks = myCallback() 

    (x_train, y_train),(x_test, y_test) = mnist.load_data()
    x_train, x_test = x_train/255.0,x_test/255.0
    
    model = tf.keras.models.Sequential([
          tf.keras.layers.Flatten(input_shape=(28, 28)),
          tf.keras.layers.Dense(512, activation=tf.nn.relu),
          tf.keras.layers.Dense(10, activation=tf.nn.softmax)
          ])

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy', 
                  metrics=['accuracy'])
    
    # model fitting
    history = model.fit(x_train, y_train, epochs=10, callbacks=[callbacks])
              
    
    # model fitting
    return history.epoch, history.history['acc'][-1]
    
